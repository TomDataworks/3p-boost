diff -rc ../boost-coroutine/boost/coroutine/coroutine.hpp boost-coroutine/boost/coroutine/coroutine.hpp
*** ../boost-coroutine/boost/coroutine/coroutine.hpp	Wed Apr 29 14:41:05 2009
--- boost-coroutine/boost/coroutine/coroutine.hpp	Wed Apr 22 09:35:22 2009
***************
*** 28,33 ****
--- 28,36 ----
  
  #ifndef BOOST_COROUTINE_COROUTINE_HPP_20060512
  #define BOOST_COROUTINE_COROUTINE_HPP_20060512
+ // On Linux systems, use native swapcontext() et al. rather than
+ // Boost.Coroutine homebrew assembler
+ #define BOOST_COROUTINE_NO_ASM
  // default_context_impl.hpp must be first for weird Apple bug
  #include <boost/coroutine/detail/default_context_impl.hpp>
  #include <cstddef>
diff -rc ../boost-coroutine/boost/coroutine/detail/self.hpp boost-coroutine/boost/coroutine/detail/self.hpp
*** ../boost-coroutine/boost/coroutine/detail/self.hpp	Sun Aug 20 13:11:09 2006
--- boost-coroutine/boost/coroutine/detail/self.hpp	Wed Jun  3 16:40:05 2009
***************
*** 217,222 ****
--- 217,235 ----
        BOOST_ASSERT(m_pimpl);
        return m_pimpl->pending();
      }
+ 
+     /// @c true only if this @c self object was created by the passed @a coroutine
+     template <typename SomeCoroutine>
+     bool is_from(const SomeCoroutine& coroutine) const
+     {
+       // get_impl() only accepts non-const ref... a mistake, IMO.
+       return static_cast<void*>(coroutine_accessor::get_impl(const_cast<SomeCoroutine&>(coroutine)).get()) ==
+              static_cast<void*>(m_pimpl);
+     }
+ 
+     /// opaque token used to correlate this 'self' with its corresponding coroutine
+     void* get_id() const { return m_pimpl; }
+ 
    private:
      coroutine_self(impl_type * pimpl, detail::init_from_impl_tag) :
        m_pimpl(pimpl) {}
diff -rc ../boost-coroutine/boost/coroutine/future.hpp boost-coroutine/boost/coroutine/future.hpp
*** ../boost-coroutine/boost/coroutine/future.hpp	Wed Apr 29 14:41:05 2009
--- boost-coroutine/boost/coroutine/future.hpp	Wed Apr 22 09:35:26 2009
***************
*** 33,38 ****
--- 33,41 ----
  #ifndef BOOST_COROUTINE_WAIT_MAX
  #define BOOST_COROUTINE_WAIT_MAX 10
  #endif
+ // On Linux systems, use native swapcontext() et al. rather than
+ // Boost.Coroutine homebrew assembler
+ #define BOOST_COROUTINE_NO_ASM
  // default_context_impl.hpp must be first for weird Apple bug
  #include <boost/coroutine/detail/default_context_impl.hpp>
  #include <boost/none.hpp>
